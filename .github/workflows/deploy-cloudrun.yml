name: CI/CD Pipeline - Google Cloud Run

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: manhattan-distance-api
  REGION: us-central1
  NODE_VERSION: "18"

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build TypeScript
        run: npm run build

      - name: Test Docker build
        run: docker build -t test-image .

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1000m \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production

      - name: Ensure public access
        run: |
          gcloud run services add-iam-policy-binding $SERVICE_NAME \
            --region $REGION \
            --member="allUsers" \
            --role="roles/run.invoker"

      - name: Show service URL and test
        run: |
          echo "Service deployed to:"
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
          echo $SERVICE_URL
          echo "Testing public access..."
          curl -f $SERVICE_URL/health || echo "Health check failed - service may still be starting"
